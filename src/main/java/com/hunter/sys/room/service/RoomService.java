package com.hunter.sys.room.service;import com.hunter.common.constant.SysConstant;import com.hunter.common.util.UserUtil;import com.hunter.sys.room.dao.RoomDao;import com.hunter.sys.room.entity.RoomEntity;import com.hunter.sys.room.mapper.RoomMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Isolation;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import javax.annotation.Resource;import java.util.List;import java.util.Map;/** * @Author zhangcl * @Date 16/7/9  下午6:06 */@Servicepublic class RoomService {    @Autowired    private RoomDao roomDao;    @Resource    private RoomMapper roomMapper;    /**     * 根据map查找房间     *     * @param map     * @return     */    public List<RoomEntity> findListByMap(Map<String, Object> map) {        return roomDao.findListByMap(map);    }    /**     * 保存房间     *     * @param roomEntity     */    public void save(RoomEntity roomEntity) {        roomDao.insertOne(roomEntity);    }    /**     * 生成房间     * @param roomEntity     *     * REQUIRES_NEW：使用自己的事务，调用的事务方法的事务被挂起     * 使用isolation 指定事务的隔离级别，最常用的取值为READ_COMMITTED,可以防止脏读     *     * 脏读（Dirty reads）——脏读发生在一个事务读取了另一个事务改写但尚未提交的数据时。如果改写在稍后被回滚了，那么第一个事务获取的数据就是无效的。     * 不可重复读（Nonrepeatable read）——不可重复读发生在一个事务执行相同的查询两次或两次以上，但是每次都得到不同的数据时。这通常是因为另一个并发事务在两次查询期间进行了更新。     * 幻读（Phantom read）——幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录。     */    @Transactional(propagation = Propagation.REQUIRES_NEW,            rollbackFor = Exception.class,            isolation = Isolation.READ_COMMITTED)    public void generateRoom(RoomEntity roomEntity){        roomEntity.setRoomType(SysConstant.INT_1);//普通房间        UserUtil.setCommonPropertyAll(roomEntity);        roomDao.insertOne(roomEntity);        int roomNumber=roomEntity.getRoomNumber();        for(int i=0;i<roomNumber;i++){            RoomEntity tempRoomEntity=new RoomEntity();            int tempRoomNumber=i+1;            tempRoomEntity.setRoomType(SysConstant.INT_1);//普通房间            tempRoomEntity.setParentId(roomEntity.getId());            tempRoomEntity.setBaseScore(roomEntity.getBaseScore());            tempRoomEntity.setMaxPlayer(roomEntity.getMaxPlayer());            tempRoomEntity.setParentName(roomEntity.getRoomName());            tempRoomEntity.setRedPacketNumber(roomEntity.getRedPacketNumber());            tempRoomEntity.setTimes(roomEntity.getTimes());            tempRoomEntity.setRoomName("房间"+tempRoomNumber);            UserUtil.setCommonPropertyAll(tempRoomEntity);            roomDao.insertOne(tempRoomEntity);        }    }}